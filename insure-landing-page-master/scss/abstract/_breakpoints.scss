$breakpoints: (
  'small':  ( min-width:  810px ),
  'medium': ( min-width:  992px ),
  'large':  ( min-width: 1200px ),
  'xlarge': (min-width: 1440px)
) !default;
/// Mixin to manage responsive breakpoints
/// @author Kitty Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to-min($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }
 
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}
//////////////////////
$breakpoints_max: (
  'small':  ( max-width:  767px ),
  'medium': ( max-width:  992px ),
  'large':  ( max-width: 1200px )
) !default;


@mixin respond-to-max($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints_max, $breakpoint) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints_max, $breakpoint))} {
      @content;
    }
  }
 
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints_max)}.";
  }
}

